#HalfminerBot configuration
#Server address to connect to, can be a domain name or IP address
host: 'localhost'
ports:
  #The servers voice port (the one you use when connecting to it via the client), default is 9987
  serverPort: 9987
  #Server query port, default is 10011
  queryPort: 10011
credentials:
  #Query user to login as
  username: 'serveradmin'
  #Can also be provided via command line, as "java -jar HalfminerBot.jar password"
  password: ''
#If true the bot will not be throttled and send commands as fast as possible. The bots IP must appear in query_ip_whitelist.txt
#localhost is whitelisted by default, the bot will assume this value to be true if host is localhost
isWhitelisted: false
#Bot name on the server (query clients are not visible in tree view, will be the bots name in chat)
botName: 'Halfminer TSBot'
#Channel the bot will be joining and using as base channel for commands (e.g. !channel create will use it as parent)
botChannelName: 'Welcome'
#Whether the bot will message joining clients, or only upon joining the bots channel ('bot.chat' permission required)
messageOnJoin: true
command:
  channel:
    #Delay in seconds until a channel will be deleted after the last client leaves
    channelDeleteDelay: 180
    #Same as above, clients with permission "cmd.channel.donator" will receive this delay instead (default: 24 hours)
    channelDeleteDelayDonator: 86400
    #Channel group to add the player to (you can get it from the channel group panel in brackets behind the group name)
    channelGroupAdminID: 2
    #Same as above, clients with permission "cmd.channel.donator" will receive this group instead
    channelGroupAdminIDDonator: 3
  help:
    #If true, clients can use "!help <querypassword>" to get the highest available group, useful when locked out
    enableGroupGrant: true
task:
  settings:
    #Provide three arguments per task seperated by comma
    # First:    number  initial execution delay
    # Second:   number  delay between subsequent execution
    # Third:    unit    time unit for first and second argument, example: disabled, seconds, minutes, hours, ...
    Inactivity: 10, 10, seconds
  inactivity:
    #String the designated AFK channel must contain, the channels necessary talk power must also be higher than 0
    channelNameContains: 'AFK'
    #How many clients to kick from AFK channel when server is full
    clientsToKickIfFull: 2
    #Time in seconds until users will be marked inactive (only if speakers are muted), marking as AFK overrides this
    idleTimeUntilMove: 300
groups:
  #Key is the groups name (can be changed) and value is talk power requirement
  #You can add as many groups as you like, but they cannot have the same talk power
  #WARNING: Enable the "skip" flag for talk power on the group permission setup screen, to ensure that client/channel
  #         talk power does not accidentally overwrite the value and puts the client in a higher group after a reload
  admin: 100
  moderator: 50
  donator: 10
  default: 0
#Hand out permission nodes to groups. Higher groups inherit lower groups permissions
permissions:
  admin:
  - cmd.admin
  - cmd.broadcast
  - cmd.bypass.cooldown
  - cmd.bypass.flood
  moderator:
  - task.inactivity.exempt.move
  - task.inactivity.exempt.kick
  - cmd.channel.update.exempt.kick
  donator:
  - cmd.channel.donator
  default:
  - bot.chat
  - cmd.channel
  - cmd.help
